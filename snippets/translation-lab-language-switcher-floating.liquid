{% if settings.language_switcher_enabled %}
{%- assign request_locale = request.locale %}
{%- assign shop_published_locales = shop.published_locales %}
{%- assign use_international_domains = false %}
{%- if shop.metafields.translation_lab.published_locales %}
{%- assign shop_published_locales = shop.metafields.translation_lab.published_locales %}
{%- assign use_international_domains = true %}
{%- endif %}
{{ 'translation-lab-language-switcher-floating.css' | asset_url | stylesheet_tag }}
<div class="translation-lab-language-switcher {{ settings.language_switcher_position }}">
    <div class="translation-lab-dropdown">
        {% if settings.language_switcher_flags %}
        <img class="language-flag" src="{{ 'tlab-flags-' | append: request_locale.iso_code | append: '.png' | asset_url }}">
        {% endif %}
        {% case settings.language_switcher_label %}
        {% when 'language-name' %}
        <span class="language-label language-name">{{ request_locale.endonym_name | split: '(' | first | strip }}</span>
        {% when 'language-code' %}
        <span class="language-label language-code">{{ request_locale.iso_code | split: '-' | first | strip }}</span>
        {% endcase %}
    </div>
    <ul class="translation-lab-language-options {{ settings.language_switcher_position }}">
        {%- for locale in shop_published_locales -%}
        <li class="language-option {% if routes.root_url == locale.root_url %}active{% endif %}" data-language-code="{{ locale.iso_code }}">
            {% if settings.language_switcher_flags %}
            <img class="language-flag" src="{{ 'tlab-flags-' | append: locale.iso_code | append: '.png' | asset_url }}">
            {% endif %}
            {% case settings.language_switcher_label %}
            {% when 'language-name' %}
            <span class="language-label language-name">{{ locale.endonym_name | split: '(' | first | strip }}</span>
            {% when 'language-code' %}
            <span class="language-label language-code">{{ locale.iso_code | split: '-' | first | strip }}</span>
            {% endcase %}
        </li>
        {%- endfor %}
    </ul>
</div>
{% if request.design_mode %}
{% endif %}
<style>
  .translation-lab-language-switcher {
    background-color: {{ settings.language_switcher_background_color }} !important;
    border-color: {{ settings.language_switcher_border_color }} !important;
    border-width: {{ settings.language_switcher_border_width }}px !important;
    font-size: {{ settings.language_switcher_font_size }} !important;
    font-weight: {{ settings.language_switcher_font_weight }} !important;
  }
  .translation-lab-dropdown {
    color: {{ settings.language_switcher_text_color }} !important;
  }
  .translation-lab-dropdown:after {
    border-color: {{ settings.language_switcher_text_color }} !important;
  }
  .translation-lab-language-switcher.top-right {
    position: absolute;
    top: {{ settings.language_switcher_spacing_top }}px;
    bottom: auto;
    left: auto;
    right: {{ settings.language_switcher_spacing_right }}px;
  }
  .translation-lab-language-switcher.top-left {
    position: absolute;
    top: {{ settings.language_switcher_spacing_top }}px;
    bottom: auto;
    left: {{ settings.language_switcher_spacing_left }}px;
    right: auto;
  }
  .translation-lab-language-switcher.bottom-left {
    position: fixed !important;
    top: auto !important;
    bottom: {{ settings.language_switcher_spacing_bottom }}px !important;
    left: {{ settings.language_switcher_spacing_left }}px !important;
    right: auto !important;
  }
  .translation-lab-language-switcher.bottom-right {
    position: fixed !important;
    top: auto !important;
    bottom: {{ settings.language_switcher_spacing_bottom }}px !important;
    left: auto !important;
    right: {{ settings.language_switcher_spacing_right }}px !important;
  }
  {% if settings.language_switcher_custom_css != blank -%}
  {{- settings.language_switcher_custom_css -}}
  {%- endif %}
</style>
<script>
    if (!Array.prototype.find) {
        Object.defineProperty(Array.prototype, 'find', {
            value: function (predicate) {
                if (this == null) {
                    throw TypeError('"this" is null or not defined');
                }
                var o = Object(this);

                var len = o.length >>> 0;

                if (typeof predicate !== 'function') {
                    throw TypeError('predicate must be a function');
                }
                var thisArg = arguments[1];

                var k = 0;

                while (k < len) {
                    var kValue = o[k];
                    if (predicate.call(thisArg, kValue, k, o)) {
                        return kValue;
                    }
                    k++;
                }
                return undefined;
            },
            configurable: true,
            writable: true
        });
    }
    if (typeof window.TranslationLab === 'undefined') {
        window.TranslationLab = {};
    }

    if (typeof TranslationLab.Helpers === 'undefined') {
        TranslationLab.Helpers = {};
    }
    TranslationLab.Helpers.buildRedirectUrl = function (redirectLanguage, currentLocale, shopDomain, useInternationalDomains) {

        if (!redirectLanguage)
            return null;

        if (!currentLocale)
            return null;

        var redirectLocaleLower = redirectLanguage.iso_code.toLowerCase();
        var currentLocaleLower = currentLocale.toLowerCase();

        if (currentLocaleLower === redirectLocaleLower)
            return null;

        var pathnameWithLocale = window.location.pathname;
        var queryString = window.location.search || '';

        var currentLocaleRegEx = new RegExp('^\/' + currentLocaleLower, "ig");
        var pathname = pathnameWithLocale.replace(currentLocaleRegEx, '');

        if (useInternationalDomains)
            return 'https://' + redirectLanguage.domain + pathname + queryString;

        if (redirectLanguage.root_url === '/')
            return 'https://' + shopDomain + pathname + queryString;

        return 'https://' + shopDomain + redirectLanguage.root_url + pathname + queryString;
    }

    if (typeof TranslationLab.Switcher === 'undefined') {
        TranslationLab.Switcher = {};
    }

    TranslationLab.Switcher.configure = function (currentLocale, shopDomain, useInternationalDomains, languageList) {

        function configureDropdown(container) {

            var dropdown = container.children[0];
            var span = dropdown.children[0];
            var selectedImg = dropdown.children[1];
            var ul = container.children[1];

            var isOpen = false;

            if (ul && ul.children) {
                Array.prototype.forEach.call(ul.children, function (li) {
                    li.addEventListener('click', languageChangeHandler(li));
                });
            }

            dropdown.addEventListener('click', function (event) {
                event.preventDefault();
                isOpen = !isOpen;
                if (isOpen) {
                    openDropdown();
                } else {
                    closeDropdown();
                }
            });

            container.addEventListener('mouseleave', function () {
                closeDropdown();
            });

            function languageChangeHandler(element) {
                var languageCode = element.dataset.languageCode;
                var elementText = element.children[0].innerText;
                var selectedLanguage = languageList.find(function (language) { return language.iso_code.toLowerCase() === languageCode.toLowerCase() });
                return function () {
                    closeDropdown();
                    span.textContent = elementText;
                    if (selectedImg) {
                        selectedImg.src = selectedLanguage.flag;
                    }

                    localStorage.setItem('translation-lab-lang', selectedLanguage.iso_code);

                    var redirectUrl = TranslationLab.Helpers.buildRedirectUrl(selectedLanguage, currentLocale, shopDomain, useInternationalDomains);
                    redirectUrl && window.location.assign(redirectUrl);
                }
            }

            function openDropdown() {
                isOpen = true;
                dropdown.classList.add('open');
                ul.classList.add('open');
            }

            function closeDropdown() {
                isOpen = false;
                dropdown.classList.remove('open');
                ul.classList.remove('open');
            }
        }

        var containers = document.querySelectorAll('.translation-lab-language-switcher');
        if (containers && containers.length) {
            for (var i = 0; i < containers.length; i++) {
                configureDropdown(containers[i]);
            }
        }
    }
</script>
<script>
    (function () {
        var useInternationalDomains = {{ use_international_domains | json }};
        var shopDomain = window.Shopify && window.Shopify.designMode
            ? '{{shop.permanent_domain}}'
            : '{{shop.domain}}';
        var currentLocale = '{{request_locale.iso_code}}';
        var languageListJson = '[{%- for locale in shop_published_locales %}{\
"name": "{{locale.name | split: "(" | first | strip}}",\
"endonym_name": "{{ locale.endonym_name | split: "(" | first | strip}}",\
"iso_code": "{{ locale.iso_code }}",\
"primary": {{ locale.primary }},\
"flag": "{{ locale.iso_code | append: ".png" | asset_url }}",\
"domain": {{ locale.domain | json }},\
"root_url": {{ locale.root_url | json }}\
}{% unless forloop.last %},{% endunless -%}{%- endfor %}]';
        var languageList = JSON.parse(languageListJson);
        TranslationLab.Switcher.configure(currentLocale, shopDomain, useInternationalDomains, languageList);

    })();
</script>
{% endif %}